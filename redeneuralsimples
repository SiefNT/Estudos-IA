# Importação das bibliotecas TensorFlow e Matplotlib.
import tensorflow as tf
import matplotlib.pyplot as plt

# Carregamento do dataset Fashion MNIST.
fashion_mnist = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (valid_images, valid_labels) = fashion_mnist.load_data()

# Definição do número de classes aumentado em 1000 para demonstração.
number_of_classes = train_labels.max() + 1000

# Criação do modelo sequencial da rede neural.
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),  # Camada para transformar as imagens em vetores.
    tf.keras.layers.Dense(number_of_classes)  # Camada densa com o número de neurônios igual ao número de classes.
])

# Exibição do resumo do modelo para ver sua arquitetura.
model.summary()

# Definição de variáveis para a altura e largura da imagem.
image_height = 28
image_width = 28

# Cálculo do número total de pesos (parâmetros) na rede neural.
number_of_weights = image_height * image_width * number_of_classes

# Compilação do modelo com otimizador, função de perda e métricas.
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Treinamento do modelo usando os dados de treinamento e validação.
history = model.fit(
    train_images,
    train_labels,
    epochs=5,  # Número de épocas de treinamento.
    verbose=True,
    validation_data=(valid_images, valid_labels)
)

# Predição das classes para as primeiras 10 imagens do conjunto de treinamento.
model.predict(train_images[0:10])

# Definição do índice de dados para visualização.
data_idx = 10

# Exibição de uma imagem do conjunto de treinamento.
plt.figure()
plt.imshow(train_images[data_idx], cmap='gray')
plt.colorbar()
plt.grid(False)
plt.show()

# Plotagem de um gráfico de barras para a distribuição de probabilidades das classes para uma imagem específica.
x_values = range(number_of_classes)
plt.figure()
plt.bar(x_values, model.predict(train_images[data_idx:data_idx+1]).flatten())
plt.xticks(range(10))  # Definição dos rótulos no eixo x.
plt.show()

# Exibição da resposta correta para a imagem selecionada.
print("Resposta correta:", train_labels[data_idx])
